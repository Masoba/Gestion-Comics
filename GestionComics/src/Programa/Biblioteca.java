/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Programa;

import Modelo.Tomo;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import util.Conexion;

/**
 *
 * @author MasobaPC
 */
public class Biblioteca extends javax.swing.JFrame {

    public Biblioteca() {
        initComponents();
        pnlPortadas.setLayout(new WrapLayout());
        cargarComics();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlBotones = new javax.swing.JPanel();
        btnAñadirComic = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        cbxBuscar = new javax.swing.JComboBox();
        btnBuscar = new javax.swing.JButton();
        btnCargarBiblioteca = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlPortadas = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnOrdenar = new javax.swing.JMenu();
        mniAlfabeticamente = new javax.swing.JMenuItem();
        mniFechaEdicionAntiguo = new javax.swing.JMenuItem();
        mniFechaEdicionNuevo = new javax.swing.JMenuItem();
        mniPrecioCaro = new javax.swing.JMenuItem();
        mniPrecioBarato = new javax.swing.JMenuItem();
        mnFiltrar = new javax.swing.JMenu();
        cbxDarkHorse = new javax.swing.JCheckBoxMenuItem();
        cbxDC = new javax.swing.JCheckBoxMenuItem();
        cbxDeBolsillo = new javax.swing.JCheckBoxMenuItem();
        cbxECC = new javax.swing.JCheckBoxMenuItem();
        cbxImage = new javax.swing.JCheckBoxMenuItem();
        cbxIvrea = new javax.swing.JCheckBoxMenuItem();
        cbxMacMillan = new javax.swing.JCheckBoxMenuItem();
        cbxMarvel = new javax.swing.JCheckBoxMenuItem();
        cbxMilkWay = new javax.swing.JCheckBoxMenuItem();
        cbxNorma = new javax.swing.JCheckBoxMenuItem();
        cbxPanini = new javax.swing.JCheckBoxMenuItem();
        cbxPlaneta = new javax.swing.JCheckBoxMenuItem();
        cbxVertigo = new javax.swing.JCheckBoxMenuItem();
        cbxOtraUSA = new javax.swing.JCheckBoxMenuItem();
        cbxOtraESP = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cbxComic = new javax.swing.JCheckBoxMenuItem();
        cbxManga = new javax.swing.JCheckBoxMenuItem();
        mnGeneros = new javax.swing.JMenu();
        cbxBelico = new javax.swing.JCheckBoxMenuItem();
        cbxCienciaFiccion = new javax.swing.JCheckBoxMenuItem();
        cbxFantasia = new javax.swing.JCheckBoxMenuItem();
        cbxHistorico = new javax.swing.JCheckBoxMenuItem();
        cbxHumor = new javax.swing.JCheckBoxMenuItem();
        cbxInfantil = new javax.swing.JCheckBoxMenuItem();
        cbxNovelaGrafica = new javax.swing.JCheckBoxMenuItem();
        cbxNegro = new javax.swing.JCheckBoxMenuItem();
        cbxSobrenatural = new javax.swing.JCheckBoxMenuItem();
        cbxSuperheroico = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        cbxHaren = new javax.swing.JCheckBoxMenuItem();
        cbxKodomo = new javax.swing.JCheckBoxMenuItem();
        cbxMecha = new javax.swing.JCheckBoxMenuItem();
        cbxSeinen = new javax.swing.JCheckBoxMenuItem();
        cbxShojo = new javax.swing.JCheckBoxMenuItem();
        cbxShonen = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlBotones.setLayout(new java.awt.GridBagLayout());

        btnAñadirComic.setText("Añadir Cómic a tu Biblioteca");
        btnAñadirComic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirComicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlBotones.add(btnAñadirComic, gridBagConstraints);

        btnAtras.setText("Atrás");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlBotones.add(btnAtras, gridBagConstraints);

        txtBuscar.setToolTipText("");
        txtBuscar.setName(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlBotones.add(txtBuscar, gridBagConstraints);

        cbxBuscar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Titulo", "Colección", "Guionista", "Dibujante", "Superhéroe" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        pnlBotones.add(cbxBuscar, gridBagConstraints);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        pnlBotones.add(btnBuscar, gridBagConstraints);

        btnCargarBiblioteca.setText("Cargar Biblioteca");
        btnCargarBiblioteca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarBibliotecaActionPerformed(evt);
            }
        });
        pnlBotones.add(btnCargarBiblioteca, new java.awt.GridBagConstraints());

        getContentPane().add(pnlBotones, java.awt.BorderLayout.PAGE_END);

        jScrollPane2.setViewportView(pnlPortadas);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        mnOrdenar.setText("Ordenar");

        mniAlfabeticamente.setText("Alfabéticamente");
        mniAlfabeticamente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAlfabeticamenteActionPerformed(evt);
            }
        });
        mnOrdenar.add(mniAlfabeticamente);

        mniFechaEdicionAntiguo.setText("Fecha de Edición (Más antigüo)");
        mniFechaEdicionAntiguo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFechaEdicionAntiguoActionPerformed(evt);
            }
        });
        mnOrdenar.add(mniFechaEdicionAntiguo);

        mniFechaEdicionNuevo.setText("Fecha de Edición (Más nuevo)");
        mniFechaEdicionNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFechaEdicionNuevoActionPerformed(evt);
            }
        });
        mnOrdenar.add(mniFechaEdicionNuevo);

        mniPrecioCaro.setText("Precio (Más caro)");
        mniPrecioCaro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPrecioCaroActionPerformed(evt);
            }
        });
        mnOrdenar.add(mniPrecioCaro);

        mniPrecioBarato.setText("Precio (Más barato)");
        mniPrecioBarato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPrecioBaratoActionPerformed(evt);
            }
        });
        mnOrdenar.add(mniPrecioBarato);

        jMenuBar1.add(mnOrdenar);

        mnFiltrar.setText("Editoriales");

        cbxDarkHorse.setSelected(true);
        cbxDarkHorse.setText("Dark Horse");
        cbxDarkHorse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDarkHorseActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxDarkHorse);

        cbxDC.setSelected(true);
        cbxDC.setText("DC");
        cbxDC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDCActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxDC);

        cbxDeBolsillo.setSelected(true);
        cbxDeBolsillo.setText("deBolsillo");
        cbxDeBolsillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDeBolsilloActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxDeBolsillo);

        cbxECC.setSelected(true);
        cbxECC.setText("ECC");
        cbxECC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxECCActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxECC);

        cbxImage.setSelected(true);
        cbxImage.setText("Image");
        cbxImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxImageActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxImage);

        cbxIvrea.setSelected(true);
        cbxIvrea.setText("Ivrea");
        cbxIvrea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxIvreaActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxIvrea);

        cbxMacMillan.setSelected(true);
        cbxMacMillan.setText("MacMillan");
        cbxMacMillan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMacMillanActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxMacMillan);

        cbxMarvel.setSelected(true);
        cbxMarvel.setText("Marvel");
        cbxMarvel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMarvelActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxMarvel);

        cbxMilkWay.setSelected(true);
        cbxMilkWay.setText("MilkWay");
        cbxMilkWay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMilkWayActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxMilkWay);

        cbxNorma.setSelected(true);
        cbxNorma.setText("Norma");
        cbxNorma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNormaActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxNorma);

        cbxPanini.setSelected(true);
        cbxPanini.setText("Panini");
        cbxPanini.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPaniniActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxPanini);

        cbxPlaneta.setSelected(true);
        cbxPlaneta.setText("Planeta");
        cbxPlaneta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPlanetaActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxPlaneta);

        cbxVertigo.setSelected(true);
        cbxVertigo.setText("Vértigo");
        cbxVertigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxVertigoActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxVertigo);

        cbxOtraUSA.setSelected(true);
        cbxOtraUSA.setText("Otra USA");
        cbxOtraUSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxOtraUSAActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxOtraUSA);

        cbxOtraESP.setSelected(true);
        cbxOtraESP.setText("Otra ESP");
        cbxOtraESP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxOtraESPActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxOtraESP);
        mnFiltrar.add(jSeparator2);

        cbxComic.setSelected(true);
        cbxComic.setText("Comic");
        cbxComic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxComicActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxComic);

        cbxManga.setSelected(true);
        cbxManga.setText("Manga");
        cbxManga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMangaActionPerformed(evt);
            }
        });
        mnFiltrar.add(cbxManga);

        jMenuBar1.add(mnFiltrar);

        mnGeneros.setText("Generos");

        cbxBelico.setSelected(true);
        cbxBelico.setText("Bélico");
        cbxBelico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxBelicoActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxBelico);

        cbxCienciaFiccion.setSelected(true);
        cbxCienciaFiccion.setText("Ciencia ficción");
        cbxCienciaFiccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCienciaFiccionActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxCienciaFiccion);

        cbxFantasia.setSelected(true);
        cbxFantasia.setText("Fantasía y aventura");
        cbxFantasia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFantasiaActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxFantasia);

        cbxHistorico.setSelected(true);
        cbxHistorico.setText("Histórico");
        cbxHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxHistoricoActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxHistorico);

        cbxHumor.setSelected(true);
        cbxHumor.setText("Humor");
        cbxHumor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxHumorActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxHumor);

        cbxInfantil.setSelected(true);
        cbxInfantil.setText("Infantil");
        cbxInfantil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxInfantilActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxInfantil);

        cbxNovelaGrafica.setSelected(true);
        cbxNovelaGrafica.setText("Novela gráfica");
        cbxNovelaGrafica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNovelaGraficaActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxNovelaGrafica);

        cbxNegro.setSelected(true);
        cbxNegro.setText("Serie negra");
        cbxNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNegroActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxNegro);

        cbxSobrenatural.setSelected(true);
        cbxSobrenatural.setText("Sobrenatural y paranormal");
        cbxSobrenatural.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSobrenaturalActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxSobrenatural);

        cbxSuperheroico.setSelected(true);
        cbxSuperheroico.setText("Superheroico");
        cbxSuperheroico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSuperheroicoActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxSuperheroico);
        mnGeneros.add(jSeparator1);

        cbxHaren.setSelected(true);
        cbxHaren.setText("Haren");
        cbxHaren.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxHarenActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxHaren);

        cbxKodomo.setSelected(true);
        cbxKodomo.setText("Kodomo");
        cbxKodomo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxKodomoActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxKodomo);

        cbxMecha.setSelected(true);
        cbxMecha.setText("Mecha");
        cbxMecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMechaActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxMecha);

        cbxSeinen.setSelected(true);
        cbxSeinen.setText("Seinen");
        cbxSeinen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSeinenActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxSeinen);

        cbxShojo.setSelected(true);
        cbxShojo.setText("Shojo");
        cbxShojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxShojoActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxShojo);

        cbxShonen.setSelected(true);
        cbxShonen.setText("Shonen");
        cbxShonen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxShonenActionPerformed(evt);
            }
        });
        mnGeneros.add(cbxShonen);

        jMenuBar1.add(mnGeneros);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(706, 458));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAñadirComicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirComicActionPerformed
        AñadirComicBiblioteca acb = new AñadirComicBiblioteca();
        acb.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAñadirComicActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        VentanaPrincipal vp = new VentanaPrincipal();
        vp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void mniAlfabeticamenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAlfabeticamenteActionPerformed

        ordenarAlfabeticamente();
    }//GEN-LAST:event_mniAlfabeticamenteActionPerformed

    private void mniFechaEdicionAntiguoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFechaEdicionAntiguoActionPerformed

        ordenarFechaEdicionAntiguo();
    }//GEN-LAST:event_mniFechaEdicionAntiguoActionPerformed

    private void mniFechaEdicionNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFechaEdicionNuevoActionPerformed

        ordenarFechaEdicionNuevo();
    }//GEN-LAST:event_mniFechaEdicionNuevoActionPerformed

    private void mniPrecioCaroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPrecioCaroActionPerformed

        ordenarPrecioCaro();
    }//GEN-LAST:event_mniPrecioCaroActionPerformed

    private void mniPrecioBaratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPrecioBaratoActionPerformed

        ordenarPrecioBarato();
    }//GEN-LAST:event_mniPrecioBaratoActionPerformed

    private void cbxDCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDCActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxDCActionPerformed

    private void cbxDeBolsilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDeBolsilloActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxDeBolsilloActionPerformed

    private void cbxECCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxECCActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxECCActionPerformed

    private void cbxImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxImageActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxImageActionPerformed

    private void cbxIvreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxIvreaActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxIvreaActionPerformed

    private void cbxMarvelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMarvelActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxMarvelActionPerformed

    private void cbxMilkWayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMilkWayActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxMilkWayActionPerformed

    private void cbxNormaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNormaActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxNormaActionPerformed

    private void cbxPaniniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPaniniActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxPaniniActionPerformed

    private void cbxPlanetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPlanetaActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxPlanetaActionPerformed

    private void cbxVertigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxVertigoActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxVertigoActionPerformed

    private void cbxComicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxComicActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxComicActionPerformed

    private void cbxMangaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMangaActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxMangaActionPerformed

    private void cbxBelicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxBelicoActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxBelicoActionPerformed

    private void cbxCienciaFiccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCienciaFiccionActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxCienciaFiccionActionPerformed

    private void cbxFantasiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFantasiaActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxFantasiaActionPerformed

    private void cbxHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxHistoricoActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxHistoricoActionPerformed

    private void cbxHumorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxHumorActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxHumorActionPerformed

    private void cbxInfantilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxInfantilActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxInfantilActionPerformed

    private void cbxNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNegroActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxNegroActionPerformed

    private void cbxSobrenaturalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSobrenaturalActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxSobrenaturalActionPerformed

    private void cbxSuperheroicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSuperheroicoActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxSuperheroicoActionPerformed

    private void cbxHarenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxHarenActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxHarenActionPerformed

    private void cbxKodomoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxKodomoActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxKodomoActionPerformed

    private void cbxMechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMechaActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxMechaActionPerformed

    private void cbxSeinenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSeinenActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxSeinenActionPerformed

    private void cbxShojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxShojoActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxShojoActionPerformed

    private void cbxShonenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxShonenActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxShonenActionPerformed

    private void cbxDarkHorseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDarkHorseActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxDarkHorseActionPerformed

    private void cbxMacMillanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMacMillanActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxMacMillanActionPerformed

    private void cbxNovelaGraficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNovelaGraficaActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxNovelaGraficaActionPerformed

    private void cbxOtraUSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxOtraUSAActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxOtraUSAActionPerformed

    private void cbxOtraESPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxOtraESPActionPerformed
        eliminarBiblioteca();
        filtrar();
    }//GEN-LAST:event_cbxOtraESPActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscar();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnCargarBibliotecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarBibliotecaActionPerformed
        eliminarBiblioteca();
        cargarComics();
    }//GEN-LAST:event_btnCargarBibliotecaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Biblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Biblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Biblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Biblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Biblioteca().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnAñadirComic;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCargarBiblioteca;
    private javax.swing.JCheckBoxMenuItem cbxBelico;
    private javax.swing.JComboBox cbxBuscar;
    private javax.swing.JCheckBoxMenuItem cbxCienciaFiccion;
    private javax.swing.JCheckBoxMenuItem cbxComic;
    private javax.swing.JCheckBoxMenuItem cbxDC;
    private javax.swing.JCheckBoxMenuItem cbxDarkHorse;
    private javax.swing.JCheckBoxMenuItem cbxDeBolsillo;
    private javax.swing.JCheckBoxMenuItem cbxECC;
    private javax.swing.JCheckBoxMenuItem cbxFantasia;
    private javax.swing.JCheckBoxMenuItem cbxHaren;
    private javax.swing.JCheckBoxMenuItem cbxHistorico;
    private javax.swing.JCheckBoxMenuItem cbxHumor;
    private javax.swing.JCheckBoxMenuItem cbxImage;
    private javax.swing.JCheckBoxMenuItem cbxInfantil;
    private javax.swing.JCheckBoxMenuItem cbxIvrea;
    private javax.swing.JCheckBoxMenuItem cbxKodomo;
    private javax.swing.JCheckBoxMenuItem cbxMacMillan;
    private javax.swing.JCheckBoxMenuItem cbxManga;
    private javax.swing.JCheckBoxMenuItem cbxMarvel;
    private javax.swing.JCheckBoxMenuItem cbxMecha;
    private javax.swing.JCheckBoxMenuItem cbxMilkWay;
    private javax.swing.JCheckBoxMenuItem cbxNegro;
    private javax.swing.JCheckBoxMenuItem cbxNorma;
    private javax.swing.JCheckBoxMenuItem cbxNovelaGrafica;
    private javax.swing.JCheckBoxMenuItem cbxOtraESP;
    private javax.swing.JCheckBoxMenuItem cbxOtraUSA;
    private javax.swing.JCheckBoxMenuItem cbxPanini;
    private javax.swing.JCheckBoxMenuItem cbxPlaneta;
    private javax.swing.JCheckBoxMenuItem cbxSeinen;
    private javax.swing.JCheckBoxMenuItem cbxShojo;
    private javax.swing.JCheckBoxMenuItem cbxShonen;
    private javax.swing.JCheckBoxMenuItem cbxSobrenatural;
    private javax.swing.JCheckBoxMenuItem cbxSuperheroico;
    private javax.swing.JCheckBoxMenuItem cbxVertigo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu mnFiltrar;
    private javax.swing.JMenu mnGeneros;
    private javax.swing.JMenu mnOrdenar;
    private javax.swing.JMenuItem mniAlfabeticamente;
    private javax.swing.JMenuItem mniFechaEdicionAntiguo;
    private javax.swing.JMenuItem mniFechaEdicionNuevo;
    private javax.swing.JMenuItem mniPrecioBarato;
    private javax.swing.JMenuItem mniPrecioCaro;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlPortadas;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    private void cargarComics() {
        Conexion c = new Conexion();
        c.conectar();
        Tomo[] tomos;
        tomos = c.cargarComics();

        int i;
        for (i = 0; i < tomos.length; i++) {
            insertarBoton(tomos, i);
        }
        c.cerrar();
    }

    private void btnComicActionPerformed(ActionEvent evt) {
        JButton btn = (JButton) evt.getSource();
        int i = Integer.valueOf(btn.getToolTipText());
        FichaComic fc = new FichaComic(i);
        fc.setVisible(true);

    }

    private void eliminarBiblioteca() {
        pnlPortadas.removeAll();
        pnlPortadas.repaint();
        pnlPortadas.updateUI();

    }

    private void ordenarAlfabeticamente() {
        Conexion c = new Conexion();
        c.conectar();
        Component[] componentes = pnlPortadas.getComponents();
        JButton[] botones = new JButton[componentes.length];
        Tomo[] tomos = c.cargarComics();
        Tomo[] tomos2 = new Tomo[componentes.length];

        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JButton) {
                botones[i] = (JButton) componentes[i];
            }
        }

        for (int k = 0; k < botones.length; k++) {
            for (int i = 0; i < tomos.length; i++) {
                if (botones[k].getToolTipText().equalsIgnoreCase(String.valueOf(tomos[i].getIDTomo()))) {
                    tomos2[k] = tomos[i];
                }
            }
        }

        int i, j;
        Tomo temp;
        for (i = 0; i < tomos2.length - 1; i++) {
            for (j = tomos2.length - 1; j > i; j--) {
                if (tomos2[j].getTitulo().compareToIgnoreCase(tomos2[j - 1].getTitulo()) < 0) {
                    temp = tomos2[j];
                    tomos2[j] = tomos2[j - 1];
                    tomos2[j - 1] = temp;
                }
            }
        }
        eliminarBiblioteca();
        for (i = 0; i < tomos2.length; i++) {
            insertarBoton(tomos2, i);

        }
        c.cerrar();
    }

    private void ordenarFechaEdicionAntiguo() {
        Conexion c = new Conexion();
        c.conectar();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Component[] componentes = pnlPortadas.getComponents();
        JButton[] botones = new JButton[componentes.length];
        Tomo[] tomos = c.cargarComics();
        Tomo[] tomos2 = new Tomo[componentes.length];

        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JButton) {
                botones[i] = (JButton) componentes[i];
            }
        }

        for (int k = 0; k < botones.length; k++) {
            for (int i = 0; i < tomos.length; i++) {
                if (botones[k].getToolTipText().equalsIgnoreCase(String.valueOf(tomos[i].getIDTomo()))) {
                    tomos2[k] = tomos[i];
                }
            }
        }

        int i, j;
        Tomo temp;
        for (i = 0; i < tomos2.length - 1; i++) {
            for (j = tomos2.length - 1; j > i; j--) {
                try {
                    if (sdf.parse(tomos2[j].getFechaEdicion()).before(sdf.parse(tomos2[j - 1].getFechaEdicion()))) {
                        temp = tomos2[j];
                        tomos2[j] = tomos2[j - 1];
                        tomos2[j - 1] = temp;
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(Biblioteca.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        eliminarBiblioteca();
        for (i = 0; i < tomos2.length; i++) {
            insertarBoton(tomos2, i);

        }
        c.cerrar();
    }

    private void ordenarFechaEdicionNuevo() {
        Conexion c = new Conexion();
        c.conectar();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Component[] componentes = pnlPortadas.getComponents();
        JButton[] botones = new JButton[componentes.length];
        Tomo[] tomos = c.cargarComics();
        Tomo[] tomos2 = new Tomo[componentes.length];

        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JButton) {
                botones[i] = (JButton) componentes[i];
            }
        }

        for (int k = 0; k < botones.length; k++) {
            for (int i = 0; i < tomos.length; i++) {
                if (botones[k].getToolTipText().equalsIgnoreCase(String.valueOf(tomos[i].getIDTomo()))) {
                    tomos2[k] = tomos[i];
                }
            }
        }

        int i, j;
        Tomo temp;
        for (i = 0; i < tomos2.length - 1; i++) {
            for (j = tomos2.length - 1; j > i; j--) {
                try {
                    if (sdf.parse(tomos2[j].getFechaEdicion()).after(sdf.parse(tomos2[j - 1].getFechaEdicion()))) {
                        temp = tomos2[j];
                        tomos2[j] = tomos2[j - 1];
                        tomos2[j - 1] = temp;
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(Biblioteca.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        eliminarBiblioteca();
        for (i = 0; i < tomos2.length; i++) {
            insertarBoton(tomos2, i);

        }
        c.cerrar();
    }

    private void ordenarPrecioCaro() {
        Conexion c = new Conexion();
        c.conectar();
        Component[] componentes = pnlPortadas.getComponents();
        JButton[] botones = new JButton[componentes.length];
        Tomo[] tomos = c.cargarComics();
        Tomo[] tomos2 = new Tomo[componentes.length];

        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JButton) {
                botones[i] = (JButton) componentes[i];
            }
        }

        for (int k = 0; k < botones.length; k++) {
            for (int i = 0; i < tomos.length; i++) {
                if (botones[k].getToolTipText().equalsIgnoreCase(String.valueOf(tomos[i].getIDTomo()))) {
                    tomos2[k] = tomos[i];
                }
            }
        }

        int i, j;
        Tomo temp;
        for (i = 0; i < tomos2.length - 1; i++) {
            for (j = tomos2.length - 1; j > i; j--) {
                if (tomos2[j].getPrecio() > tomos2[j - 1].getPrecio()) {
                    temp = tomos2[j];
                    tomos2[j] = tomos2[j - 1];
                    tomos2[j - 1] = temp;
                }
            }
        }
        eliminarBiblioteca();
        for (i = 0; i < tomos2.length; i++) {
            insertarBoton(tomos2, i);

        }
        c.cerrar();
    }

    private void ordenarPrecioBarato() {
        Conexion c = new Conexion();
        c.conectar();
        Component[] componentes = pnlPortadas.getComponents();
        JButton[] botones = new JButton[componentes.length];
        Tomo[] tomos = c.cargarComics();
        Tomo[] tomos2 = new Tomo[componentes.length];

        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JButton) {
                botones[i] = (JButton) componentes[i];
            }
        }

        for (int k = 0; k < botones.length; k++) {
            for (int i = 0; i < tomos.length; i++) {
                if (botones[k].getToolTipText().equalsIgnoreCase(String.valueOf(tomos[i].getIDTomo()))) {
                    tomos2[k] = tomos[i];
                }
            }
        }

        int i, j;
        Tomo temp;
        for (i = 0; i < tomos2.length - 1; i++) {
            for (j = tomos2.length - 1; j > i; j--) {
                if (tomos2[j].getPrecio() < tomos2[j - 1].getPrecio()) {
                    temp = tomos2[j];
                    tomos2[j] = tomos2[j - 1];
                    tomos2[j - 1] = temp;
                }
            }
        }
        eliminarBiblioteca();
        for (i = 0; i < tomos2.length; i++) {
            insertarBoton(tomos2, i);

        }
        c.cerrar();
    }

    private void filtrar() {
        Conexion c = new Conexion();
        c.conectar();
        Tomo[] tomos = c.cargarComics();
        int j = 0;

        for (int i = 0; i < tomos.length; i++) {

            if (tomos[i].getTipo().equalsIgnoreCase("Comic") && cbxComic.isSelected()) {

                if (tomos[i].getEditorialUSA().equalsIgnoreCase("Dark Horse") && cbxDarkHorse.isSelected()) {
                    filtrarEditorialUSA(tomos, i, "Dark Horse");
                } else if (tomos[i].getEditorialUSA().equalsIgnoreCase("DC") && cbxDC.isSelected()) {
                    filtrarEditorialUSA(tomos, i, "DC");
                } else if (tomos[i].getEditorialUSA().equalsIgnoreCase("Image") && cbxImage.isSelected()) {
                    filtrarEditorialUSA(tomos, i, "Image");
                } else if (tomos[i].getEditorialUSA().equalsIgnoreCase("MacMillan") && cbxMacMillan.isSelected()) {
                    filtrarEditorialUSA(tomos, i, "MacMillan");
                } else if (tomos[i].getEditorialUSA().equalsIgnoreCase("Marvel") && cbxMarvel.isSelected()) {
                    filtrarEditorialUSA(tomos, i, "Marvel");
                } else if (tomos[i].getEditorialUSA().equalsIgnoreCase("Otra") && cbxOtraUSA.isSelected()) {
                    filtrarEditorialUSA(tomos, i, "Otra");
                } else if (tomos[i].getEditorialESP().equalsIgnoreCase("deBolsillo") && cbxDeBolsillo.isSelected()) {
                    filtrarEditorialESP(tomos, i, "deBolsillo");
                } else if (tomos[i].getEditorialESP().equalsIgnoreCase("ECC") && cbxIvrea.isSelected()) {
                    filtrarEditorialESP(tomos, i, "ECC");
                } else if (tomos[i].getEditorialESP().equalsIgnoreCase("Ivrea") && cbxIvrea.isSelected()) {
                    filtrarEditorialESP(tomos, i, "Ivrea");
                } else if (tomos[i].getEditorialESP().equalsIgnoreCase("MilkWay") && cbxMilkWay.isSelected()) {
                    filtrarEditorialESP(tomos, i, "MilkWay");
                } else if (tomos[i].getEditorialESP().equalsIgnoreCase("Norma") && cbxNorma.isSelected()) {
                    filtrarEditorialESP(tomos, i, "Norma");
                } else if (tomos[i].getEditorialESP().equalsIgnoreCase("Panini") && cbxPanini.isSelected()) {
                    filtrarEditorialESP(tomos, i, "Marvel");
                } else if (tomos[i].getEditorialESP().equalsIgnoreCase("Planeta") && cbxPlaneta.isSelected()) {
                    filtrarEditorialESP(tomos, i, "Planeta");
                } else if (tomos[i].getEditorialESP().equalsIgnoreCase("Otra") && cbxOtraESP.isSelected()) {
                    filtrarEditorialESP(tomos, i, "Otra");
                }

            }
        }

        c.cerrar();
    }

    public void insertarBoton(Tomo[] tomos, int i) {

        ImageIcon portada = new ImageIcon(tomos[i].getPortada());
        Image img = portada.getImage();
        img = img.getScaledInstance(96, 145, java.awt.Image.SCALE_SMOOTH);
        portada = new ImageIcon(img);
        JButton boton = new JButton(portada);
        boton.setBorderPainted(false);
        boton.setContentAreaFilled(false);
        boton.setFocusPainted(false);
        boton.setOpaque(false);
        boton.setToolTipText(String.valueOf(tomos[i].getIDTomo()));
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComicActionPerformed(evt);
            }

        });
        pnlPortadas.add(boton);
    }

    public void filtrarEditorialUSA(Tomo[] tomos, int i, String editorialUSA) {

        if (editorialUSA.equalsIgnoreCase("Marvel")) {
            if (tomos[i].getEditorialUSA().equalsIgnoreCase(editorialUSA) && cbxMarvel.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialUSA.equalsIgnoreCase("Otra")) {
            if (tomos[i].getEditorialUSA().equalsIgnoreCase(editorialUSA) && cbxOtraUSA.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialUSA.equalsIgnoreCase("DC")) {
            if (tomos[i].getEditorialUSA().equalsIgnoreCase(editorialUSA) && cbxDC.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialUSA.equalsIgnoreCase("Dark Horse")) {
            if (tomos[i].getEditorialUSA().equalsIgnoreCase(editorialUSA) && cbxDarkHorse.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialUSA.equalsIgnoreCase("Image")) {
            if (tomos[i].getEditorialUSA().equalsIgnoreCase(editorialUSA) && cbxImage.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialUSA.equalsIgnoreCase("MacMillan")) {
            if (tomos[i].getEditorialUSA().equalsIgnoreCase(editorialUSA) && cbxMacMillan.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Gráfica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialUSA.equalsIgnoreCase("Vertigo")) {
            if (tomos[i].getEditorialUSA().equalsIgnoreCase(editorialUSA) && cbxVertigo.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

    }

    public void filtrarEditorialESP(Tomo[] tomos, int i, String editorialESP) {
        if (editorialESP.equalsIgnoreCase("deBolsillo")) {
            if (tomos[i].getEditorialESP().equalsIgnoreCase(editorialESP) && cbxDeBolsillo.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialESP.equalsIgnoreCase("deBolsillo")) {
            if (tomos[i].getEditorialESP().equalsIgnoreCase(editorialESP) && cbxDeBolsillo.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialESP.equalsIgnoreCase("Otra")) {
            if (tomos[i].getEditorialESP().equalsIgnoreCase(editorialESP) && cbxOtraESP.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialESP.equalsIgnoreCase("Ivrea")) {
            if (tomos[i].getEditorialESP().equalsIgnoreCase(editorialESP) && cbxIvrea.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialESP.equalsIgnoreCase("MilkWay")) {
            if (tomos[i].getEditorialESP().equalsIgnoreCase(editorialESP) && cbxMilkWay.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialESP.equalsIgnoreCase("Norma")) {
            if (tomos[i].getEditorialESP().equalsIgnoreCase(editorialESP) && cbxNorma.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialESP.equalsIgnoreCase("Panini")) {
            if (tomos[i].getEditorialESP().equalsIgnoreCase(editorialESP) && cbxPanini.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }

        if (editorialESP.equalsIgnoreCase("Planeta")) {
            if (tomos[i].getEditorialESP().equalsIgnoreCase(editorialESP) && cbxPlaneta.isSelected()) {

                if (tomos[i].getGenero().equalsIgnoreCase("Belico") && cbxBelico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Ciencia Ficcion") && cbxCienciaFiccion.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Fantasia") && cbxFantasia.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Historico") && cbxHistorico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Humor") && cbxHumor.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Infantil") && cbxInfantil.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Sobrenatural y paranormal") && cbxSobrenatural.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Superheroico") && cbxSuperheroico.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Serie Negra") && cbxNegro.isSelected()) {
                    insertarBoton(tomos, i);
                } else if (tomos[i].getGenero().equalsIgnoreCase("Novela Grafica") && cbxNovelaGrafica.isSelected()) {
                    insertarBoton(tomos, i);
                }
            }
        }
    }

    private void buscar() {
        Conexion c = new Conexion();
        c.conectar();
        Component[] componentes = pnlPortadas.getComponents();
        JButton[] botones = new JButton[componentes.length];
        Tomo[] tomos = c.cargarComics();
        Tomo[] tomos2 = new Tomo[componentes.length];

        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JButton) {
                botones[i] = (JButton) componentes[i];
            }
        }

        for (int k = 0; k < botones.length; k++) {
            for (int i = 0; i < tomos.length; i++) {
                if (botones[k].getToolTipText().equalsIgnoreCase(String.valueOf(tomos[i].getIDTomo()))) {
                    tomos2[k] = tomos[i];
                }
            }
        }

        eliminarBiblioteca();

        String accion = String.valueOf(cbxBuscar.getSelectedItem());
        String buscar = txtBuscar.getText();

        for (int i = 0; i < tomos2.length; i++) {
            if (accion.equalsIgnoreCase("titulo")) {
                if (tomos2[i].getTitulo().equalsIgnoreCase(buscar)) {
                    insertarBoton(tomos2, i);
                }
            } else if (accion.equalsIgnoreCase("guionista")) {
                if (tomos2[i].getGuionista().equalsIgnoreCase(buscar)) {
                    insertarBoton(tomos2, i);
                }
            } else if (accion.equalsIgnoreCase("dibujante")) {
                if (tomos2[i].getDibujante().equalsIgnoreCase(buscar)) {
                    insertarBoton(tomos2, i);
                }
            } else if (accion.equalsIgnoreCase("Superhéroe")) {
                if (tomos2[i].getSuperheroe().equalsIgnoreCase(buscar)) {
                    insertarBoton(tomos2, i);
                }
            } else if (accion.equalsIgnoreCase("Colección")) {
                if (tomos2[i].getColeccion().equalsIgnoreCase(buscar)) {
                    insertarBoton(tomos2, i);
                }
            } 
        }
        c.cerrar();
    }

}
